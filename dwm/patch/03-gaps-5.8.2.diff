--- a/config.def.h	2011-03-06 14:09:10.532010755 +0000
+++ b/config.def.h	2011-03-06 14:10:55.094968992 +0000
@@ -23,18 +23,19 @@ static const Rule rules[] = {
 };
 
 /* layout(s) */
-static const float mfact      = 0.55; /* factor of master area size [0.05..0.95] */
-static const int nmaster      = 2; /* default number of clients in the master area */
-static const Bool resizehints = True; /* True means respect size hints in tiled resizals */
+static const float mfact        = 0.55; /* factor of master area size [0.05..0.95] */
+static const int nmaster        = 2;    /* default number of clients in the master area */
+static const unsigned int gappx = 4;    /* gap pixel between windows */
+static const Bool resizehints   = True; /* True means respect size hints in tiled resizals */
 
 #include "nbstack.c"
 
 static const Layout layouts[] = {
-	/* symbol arrange function */
-	{ "=2]",  ntile   },    /* first entry is default */
-	{ "><>",  NULL    },    /* no layout function means floating behavior */
-	{ "[M]",  monocle },
- { "T2T",  nbstack },
+	/* symbol add gaps  arrange function */
+	{ "=2]",  True,     ntile   },    /* first entry is default */
+	{ "><>",  False,    NULL    },    /* no layout function means floating behavior */
+	{ "[M]",  False,    monocle },
+  { "T2T",  True,     nbstack },
 };
 
 /* tagging */
--- a/dwm.c	2010-06-04 11:39:15.000000000 +0100
+++ b/dwm.c	2011-03-06 05:41:41.615114906 +0000
@@ -119,6 +119,7 @@ typedef struct {
 
 typedef struct {
 	const char *symbol;
+  Bool addgaps;
 	void (*arrange)(Monitor *);
 } Layout;
 
@@ -474,7 +475,7 @@ checkotherwm(void) {
 void
 cleanup(void) {
 	Arg a = {.ui = ~0};
-	Layout foo = { "", NULL };
+	Layout foo = { "", False, NULL };
 	Monitor *m;
 
 	view(&a);
@@ -1344,11 +1345,12 @@ resize(Client *c, int x, int y, int w, i
 void
 resizeclient(Client *c, int x, int y, int w, int h) {
 	XWindowChanges wc;
+  unsigned int gap = c->isfloating ? 0 : selmon->lt[selmon->sellt]->addgaps ? gappx : 0;
 
-	c->oldx = c->x; c->x = wc.x = x;
-	c->oldy = c->y; c->y = wc.y = y;
-	c->oldw = c->w; c->w = wc.width = w;
-	c->oldh = c->h; c->h = wc.height = h;
+	c->oldx = c->x; c->x = wc.x = x + gap;
+	c->oldy = c->y; c->y = wc.y = y + gap;
+	c->oldw = c->w; c->w = wc.width = w - (gap ? (x + w + (c->bw * 2) == c->mon->wx + c->mon->ww ? 2 : 1) * gap : 0);
+	c->oldh = c->h; c->h = wc.height = h - (gap ? (y + h + (c->bw * 2) == c->mon->wy + c->mon->wh ? 2 : 1) * gap : 0);
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, c->win, CWX|CWY|CWWidth|CWHeight|CWBorderWidth, &wc);
 	configure(c);
