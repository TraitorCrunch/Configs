diff -up dwm-5.8.2/config.def.h dwm-5.8.2-opacity/config.def.h
--- dwm-5.8.2/config.def.h	2011-03-07 02:26:05.552528091 +0000
+++ dwm-5.8.2-opacity/config.def.h	2011-03-07 02:30:55.018019153 +0000
@@ -17,15 +17,16 @@ static const Bool showbar           = Tr
 static const Bool topbar            = True;     /* False means bottom bar */
 
 static const Rule rules[] = {
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            True,        -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       False,       -1 },
+	/* class      instance    title       tags mask     isfloating   monitor  opacity*/
+	{ "Gimp",     NULL,       NULL,       0,            True,        -1,      -1 },
+	{ "Firefox",  NULL,       NULL,       1 << 8,       False,       -1,      -1 },
 };
 
 /* layout(s) */
 static const float mfact        = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster        = 2;    /* default number of clients in the master area */
 static const unsigned int gappx = 4;    /* gap pixel between windows */
+static const unsigned int shade = 80;   /* opacity of unfocussed clients */
 static const Bool resizehints   = True; /* True means respect size hints in tiled resizals */
 
 #include "nbstack.c"
diff -up dwm-5.8.2/dwm.c dwm-5.8.2-opacity/dwm.c
--- dwm-5.8.2/dwm.c	2011-03-07 02:26:05.552528091 +0000
+++ dwm-5.8.2-opacity/dwm.c	2011-03-07 02:36:59.692913135 +0000
@@ -67,7 +67,7 @@
 enum { CurNormal, CurResize, CurMove, CurLast };        /* cursor */
 enum { ColBorder, ColFG, ColBG, ColLast };              /* color */
 enum { NetSupported, NetWMName, NetWMState,
-       NetWMFullscreen, NetLast };                      /* EWMH atoms */
+       NetWMFullscreen, NetWMWindowOpacity, NetLast };  /* EWMH atoms */
 enum { WMProtocols, WMDelete, WMState, WMLast };        /* default atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
        ClkClientWin, ClkRootWin, ClkLast };             /* clicks */
@@ -102,6 +102,7 @@ struct Client {
 	Client *snext;
 	Monitor *mon;
 	Window win;
+  int opacity;
 };
 
 typedef struct {
@@ -172,6 +173,7 @@ typedef struct {
 	unsigned int tags;
 	Bool isfloating;
 	int monitor;
+  int opacity;
 } Rule;
 
 /* function declarations */
@@ -203,6 +205,7 @@ static void drawsquare(Bool filled, Bool
 static void drawtext(const char *text, unsigned long col[ColLast], Bool pad);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
+static void opacify(Client *c, int opy);
 static void focus(Client *c);
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
@@ -328,6 +331,7 @@ applyrules(Client *c) {
 			&& (!r->instance || strstr(instance, r->instance)))
 			{
 				c->isfloating = r->isfloating;
+        c->opacity = r->opacity;
 				c->tags |= r->tags;
 				for(m = mons; m && m->num != r->monitor; m = m->next);
 				if(m)
@@ -889,12 +893,27 @@ expose(XEvent *e) {
 }
 
 void
+opacify(Client *c, int opy) {
+	if(opy >= 0 && opy <= 100) {
+		unsigned long opacity[] = { (opy / 100.0) * 0xffffffff };
+		XChangeProperty(dpy, c->win, netatom[NetWMWindowOpacity], XA_CARDINAL, 32, 
+        PropModeReplace, (unsigned char *)opacity, 1);
+	} else
+		XDeleteProperty(dpy, c->win, netatom[NetWMWindowOpacity]);
+}
+
+void
 focus(Client *c) {
 	if(!c || !ISVISIBLE(c))
 		for(c = selmon->stack; c && !ISVISIBLE(c); c = c->snext);
 	/* was if(selmon->sel) */
-	if(selmon->sel && selmon->sel != c)
+	if(selmon->sel && selmon->sel != c) {
 		unfocus(selmon->sel, False);
+		if(selmon->sel->opacity == -1)
+			opacify(selmon->sel, shade);
+		else
+			opacify(selmon->sel, MIN(shade, selmon->sel->opacity));
+	}
 	if(c) {
 		if(c->mon != selmon)
 			selmon = c->mon;
@@ -910,6 +929,8 @@ focus(Client *c) {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
 	selmon->sel = c;
 	drawbars();
+  if(c)
+    opacify(c, c->opacity);
 }
 
 void
@@ -1161,6 +1182,7 @@ manage(Window w, XWindowAttributes *wa)
 	updatetitle(c);
 	if(XGetTransientForHint(dpy, w, &trans))
 		t = wintoclient(trans);
+  c->opacity = -1;
 	if(t) {
 		c->mon = t->mon;
 		c->tags = t->tags;
@@ -1614,6 +1636,7 @@ setup(void) {
 	netatom[NetWMName] = XInternAtom(dpy, "_NET_WM_NAME", False);
 	netatom[NetWMState] = XInternAtom(dpy, "_NET_WM_STATE", False);
 	netatom[NetWMFullscreen] = XInternAtom(dpy, "_NET_WM_STATE_FULLSCREEN", False);
+	netatom[NetWMWindowOpacity] = XInternAtom(dpy, "_NET_WM_WINDOW_OPACITY", False);
 	/* init cursors */
 	cursor[CurNormal] = XCreateFontCursor(dpy, XC_left_ptr);
 	cursor[CurResize] = XCreateFontCursor(dpy, XC_sizing);
